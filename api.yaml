swagger: "2.0"
info:
  description: "This is a sample server API"
  version: "1.0.0"
  title: "Demo API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "braincaus@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/api"
tags:
- name: "users"
  description: "Manage your users information"
- name: "news"
  description: "Manage News"
schemes:
- "http"
paths:
  /users:
    get:
      tags:
      - "users"
      summary: "List of all Users"
      description: "List of all Users"
      operationId: "getUsers"
      produces:
      - "application/json"
      responses:
        200:
          description: "Ok"
    post:
      tags:
      - "users"
      summary: "List of all Users"
      description: "List of all Users"
      operationId: "postUsers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "New user"
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Bad request"
    
  /user/login:
    post:
      tags:
      - "users"
      summary: "Logs user into the system"
      description: "Logs user into the system"
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Token"
        400:
          description: "Invalid username/password supplied"
          
  /user/logout:
    post:
      tags:
      - "users"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  
  /news:
    get:
      tags:
      - "news"
      summary: "List of all News"
      description: "List of all News"
      operationId: "getNews"
      produces:
      - "application/json"
      responses:
        200:
          description: "Ok"
    post:
      tags:
      - "news"
      summary: "List of all News"
      description: "List of all News"
      operationId: "postNews"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "New new"
        schema:
          $ref: "#/definitions/New"
      responses:
        201:
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/New"
        400:
          description: "Bad request"
  /news/{newId}:
    get:
      tags:
      - "news"
      summary: "Get a specific new"
      description: "Get a specific new"
      operationId: "getNew"
      produces:
      - "application/json"
      parameters:
      - name: "newId"
        in: "path"
        description: "ID of the new to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/New"
        400:
          description: "Bad request"
        404:
          description: "New not found"


definitions:
  User:
    type: "object"
    properties: 
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
  New:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      owner:
        $ref: "#/definitions/User"
      title:
        type: "string"
        example: "Title"
      body:
        type: "string"
        example: "Content"
  Token:
    type: "object"
    properties:
      Token:
        type: "string"
        example: "m1T0k3nM4lv4d0"
    xml:
      name: "Token"
